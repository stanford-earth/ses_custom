<?php

$ses_custom_errors = array();

function ses_custom_init() {
    drupal_add_js(drupal_get_path('module', 'ses_custom') . '/ses_custom_people.js');
}

/*
 * implementation of hook_menu
 */
function ses_custom_menu()
{
    $items = array();
    $items['add_or_update_sunet_user'] = array(
        'title' => 'Manually Add or Update SUNet User from workgroup',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ses_custom_add_sunet_user_form'),
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );
    $items['mailchimp_csv_file'] = array(
        'title' => 'Create a CSV file from workgroup earthsci:drupal-accounts for import into MailChimp',
        'page callback' => '_ses_custom_mailchimp_csv',
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );
    $items['agu-cartoons-permalink/%'] = array(
        'title' => 'Permalink to AGU Cartoons View',
        'page callback' => '_ses_custom_cartoon_permalink',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['get_workgroup_members/%'] = array(
        'title' => 'Get Workgroup Members',
        'page callback' => '_ses_custom_show_workgroup_members',
        'page arguments' => array(1),
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );
  $items['update_workgroup_members/%/%'] = array(
    'title' => 'Update Workgroup Members',
    'page callback' => '_ses_custom_update_workgroup_members',
    'page arguments' => array(1,2),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );
    return $items;
}

function _ses_custom_update_workgroup_members($set,$workgroup) {
  if ($workgroup == 'all') {
    if ($set == 'regular') {
      _ses_custom_store_regular_workgroups();
    } else if ($set == 'research') {
      _ses_custom_store_research_workgroups();
    } else {
      die ('Unknown workgroup set.');
    }
  } else {
    if ($set == 'regular' || $set == 'research') {
      _ses_custom_store_workgroup_members($set, array($workgroup));
    } else {
      die ('Unkown workgroup set.');
    }
  }
  $wg_array = variable_get('se3_workgroup_members', array());
  print 'workgroups:<br />';
  print '<pre>'; print_r($wg_array); print '</pre><br />';
  print 'done<br />';
}

function _ses_custom_show_workgroup_members($workgroup)
{
    global $ses_mais_crt_path, $ses_mais_key_path, $ses_custom_errors;
    $ses_custom_errors = array();
    // get the workgroup members as an array
    $wg_members = _ses_custom_get_workgroup_members($workgroup, $ses_mais_crt_path, $ses_mais_key_path);
    print 'workgroup: ' . $workgroup . '<pre>';
    print_r($wg_members);
    print '</pre>';
    if (!empty($ses_custom_errors)) {
        print 'errors: <pre>';
        print_r($ses_custom_errors);
        print '</pre>';
    }
}

function _ses_custom_mailchimp_csv()
{
    global $ses_mais_crt_path, $ses_mais_key_path, $ses_custom_errors;
    $ses_custom_errors = array();
    // get the workgroup members as an array
    $wg_members = _ses_custom_get_workgroup_members('earthsci:drupal-accounts', $ses_mais_crt_path, $ses_mais_key_path);
    $output = '';
    if (empty($wg_members)) {
        watchdog('ses_custom', 'Empty or unable to get workgroup members for ' . $group);
        drupal_set_message('Empty or unable to check access workgroup ' . $group . ' for MailChimp csv');
        _ses_custom_mail_error_report($ses_custom_errors,'mailchimp_csv');
        return '';
    } else {
        header('Content-Type: application/excel');
        header('Content-Disposition: attachment; filename="mailchimp.csv"');
        $mc_array = array('Email Address', 'Last Name', 'First Name');
        $fp = fopen('php://output', 'w');
        fputcsv($fp, $mc_array);
        foreach ($wg_members as $sunet => $member) {
            $email = $sunet . '@stanford.edu';
            if (strpos($member['directory_name'], ',') !== FALSE) {
                $lastname = substr($member['directory_name'], 0, strpos($member['directory_name'], ','));
                $firstname = substr($member['directory_name'], strpos($member['directory_name'], ',') + 2);
            } else {
                $lastname = $member['directory_name'];
                $firstname = '';
            }
            $mc_array = array($email, $lastname, $firstname);
            fputcsv($fp, $mc_array, ',', '"');
        }
        fclose($fp);
    } // if workgroup has members
}

/*
 * implementation of hook_user_login
 */
function ses_custom_user_login(&$edit, $account)
{
    // if this is an alumni user account, log it out
    if (!empty($account->field_alumni_affiliations) && empty($account->field_workgroup_membership[LANGUAGE_NONE])) {
        user_logout();
    }
}

function _ses_custom_hide_or_disable_form_field(&$form, $field_name, $todo = 'hide')
{
    //if ($todo === 'hide') {
    //    $form[$field_name]['#type'] = 'hidden';
    //} elseif ($todo === 'disable') {
        $form[$field_name]['#disabled'] = TRUE;
    //}
}

function _ses_custom_profile_override_pre_render($element)
{
    if (!empty($element[LANGUAGE_NONE][0]['#field_name'])) {
        $fields = array(
            'field_ses_title_override' => array('cap_field_name' => array('field_cap_short_title',),
                'start_text' => 'Your StanfordWho title is ',
            ),
            'field_office_location' => array('cap_field_name' => array('field_cap_address',),
                'start_text' => 'Your StanfordWho address is ',
            ),
            'field_phone' => array('cap_field_name' => array('field_cap_primary_phone',),
                'start_text' => 'Your StanfordWho primary phone number is ',
            ),
            'field_fax' => array('cap_field_name' => array('field_cap_fax',),
                'start_text' => 'Your StanfordWho fax number is ',
            ),
            'field_stanford_email' => array('cap_field_name' => array('field_cap_primary_email',),
                'start_text' => 'Your StanfordWho primary email is ',
            ),
            'field_ses_research_override' => array('cap_field_name' => array('field_cap_research_terse',
                'field_cap_research_short',),
                'start_text' => 'Your Stanford Profile research field is ',
            ),
        );
        $override_field_name = $element[LANGUAGE_NONE][0]['#field_name'];
        if (array_key_exists($override_field_name, $fields)) {
            $insert_text = 'empty. ';
            foreach ($fields[$override_field_name]['cap_field_name'] as $cap_field_name) {
                if (!empty($element[LANGUAGE_NONE][0]['#entity']->{$cap_field_name})) {
                    $insert_text = '"' . $element[LANGUAGE_NONE][0]['#entity']->{$cap_field_name}[LANGUAGE_NONE][0]['value'] . '." ';
                    break;
                }
            }
            if ($override_field_name == 'field_ses_research_override') {
                $element[LANGUAGE_NONE][0]['#description'] = $fields[$override_field_name]['start_text'] . $insert_text . $element[LANGUAGE_NONE][0]['#description'];
            } else {
                $element[LANGUAGE_NONE][0]['value']['#description'] = $fields[$override_field_name]['start_text'] . $insert_text . $element[LANGUAGE_NONE][0]['value']['#description'];
            }
        }
    }
    return $element;
}

/*
 * implementation of hook_form_alter
 */
function ses_custom_form_alter(&$form, &$form_state, $form_id)
{
    // build some fake view filter forms that we will later match to workgroups
    if ($form_id == 'views_exposed_form') {
        if (in_array($form['#id'], array('views-exposed-form-people-ess-all', 'views-exposed-form-people-ere-all',
            'views-exposed-form-people-gs-page', 'views-exposed-form-people-gp-page', 'views-exposed-form-people-page',
            'views-exposed-form-manage-profiles-page', 'views-exposed-form-emergency-contacts-page',
            'views-exposed-form-directory-page'))) {
            $form['tmp_associate_type'] = array(
                '#type' => 'select',
                '#options' => array('all' => '- All -'),
                '#size' => null,
                '#default_value' => 'all',
            );
            $form['tmp_associate_type']['#options']['faculty'] = 'All Faculty';
            $form['tmp_associate_type']['#options']['regular'] = 'Regular Faculty';
            $form['tmp_associate_type']['#options']['emeritus'] = 'Emeritus Faculty';
            $form['tmp_associate_type']['#options']['affiliated'] = 'Affiliated Faculty';
            $form['tmp_associate_type']['#options']['postdocs'] = 'Post Doctoral Scholars';
            if ($form['#id'] != 'views-exposed-form-people-ess-all') {
                $form['tmp_associate_type']['#options']['students'] = 'All Students';
            }
            $form['tmp_associate_type']['#options']['graduate'] = 'All Graduate Students';
            $form['tmp_associate_type']['#options']['phd'] = 'PhD Students';
            $form['tmp_associate_type']['#options']['masters'] = 'Masters Students';
            if ($form['#id'] != 'views-exposed-form-people-ess-all') {
                $form['tmp_associate_type']['#options']['undergraduate'] = 'Undergraduate Students';
            }
            $form['tmp_associate_type']['#options']['staff'] = 'All Staff';
            $form['tmp_associate_type']['#options']['admin'] = 'Administrative Staff';
            $form['tmp_associate_type']['#options']['research'] = 'Research Staff';
            if ($form['#id'] == 'views-exposed-form-people-ess-all' || $form['#id'] == 'views-exposed-form-people-page' ||
              $form['#id'] == 'views-exposed-form-manage-profiles-page' || 'views-exposed-form-emergency-contacts-page' ||
              $form['#id'] == 'views-exposed-form-directory-page') {
                $form['tmp_associate_type']['#options']['teaching'] = 'Teaching Staff';
            }
            $new_info = array('filter-tmp-associate-type' => array('label' => 'Type', 'value' => 'tmp_associate_type'));
            if ($form['#id'] == 'views-exposed-form-people-page' || $form['#id'] == 'views-exposed-form-emergency-contacts-page' ||
                $form['#id'] == 'views-exposed-form-manage-profiles-page' || $form['#id'] == 'views-exposed-form-directory-page') {
                $form['tmp_affiliation'] = array(
                    '#type' => 'select',
                    '#options' => array('all' => '- All -'),
                    '#size' => null,
                    '#default_value' => 'all',
                );
                $form['tmp_affiliation']['#options']['deans'] = "Dean's Office";
                $form['tmp_affiliation']['#options']['esys'] = 'Earth Systems';
                $form['tmp_affiliation']['#options']['eiper'] = 'E-IPER';
                $form['tmp_affiliation']['#options']['ere'] = "Energy Resources Engineering";
                $form['tmp_affiliation']['#options']['eess'] = 'Earth System Science';
                $form['tmp_affiliation']['#options']['ges'] = 'Geological Sciences';
                $form['tmp_affiliation']['#options']['geophysics'] = 'Geophysics';
                $new_info['filter-tmp-affiliation'] = array('label' => 'Affiliation', 'value' => 'tmp_affiliation');
            }
            $form['#info'] = array_merge($new_info, $form['#info']);
            if (!isset($form['#validate'])) $form['#validate'] = array();
            $form['#validate'] = array_merge(array('_ses_custom_wg_validate'), $form['#validate']);
        } else if ($form['#id'] == 'views-exposed-form-people-alumni-ms' ||
                   $form['#id'] == 'views-exposed-form-people-joint-ms') {
            $form['eiper_ms_degree'] = array(
                '#type' => 'select',
                '#options' => array('- All -'),
                '#size' => null,
                '#default_value' => 0,
            );
            if ($form['#id'] == 'views-exposed-form-people-alumni-ms') {
                $result = db_query("SELECT DISTINCT field_ses_alumni_program_value FROM " .
                    "{field_data_field_ses_alumni_program} WHERE field_ses_alumni_program_value NOT LIKE '%phd%' " .
                    "ORDER BY field_ses_alumni_program_value");
                foreach ($result as $row) {
                    $form['eiper_ms_degree']['#options'][] = $row->field_ses_alumni_program_value;
                }
            } else if ($form['#id'] == 'views-exposed-form-people-joint-ms') {
                $result = db_query("SELECT DISTINCT t.field_ses_title_override_value FROM " .
                    "field_data_field_ses_title_override t, field_data_field_ses_workgroup_membership w " .
                    "WHERE  t.entity_id = w.entity_id AND w.field_ses_workgroup_membership_value = " .
                    "'earthsci:eiper-students-graduate' ORDER BY t.field_ses_title_override_value");
                foreach ($result as $row) {
                    $form['eiper_ms_degree']['#options'][] = $row->field_ses_title_override_value;
                }
            }
            $new_info = array('filter-eiper-ms-degree' => array('label' => 'Degree', 'value' => 'eiper_ms_degree'));
            $form['#info'] = array_merge($new_info, $form['#info']);
            if (!isset($form['#validate'])) $form['#validate'] = array();
            $form['#validate'] = array_merge(array('_ses_custom_eiper_ms_validate'), $form['#validate']);
        }
    } else if ($form_id == 'user_profile_form') {

        foreach (array('field_ses_title_override', 'field_office_location', 'field_phone', 'field_fax', 'field_stanford_email', 'field_ses_research_override') as $field_name) {
            if (!isset($form[$field_name]['#pre_render'])) $form[$field_name]['#pre_render'] = array();
            $form[$field_name]['#pre_render'][] = '_ses_custom_profile_override_pre_render';
        }

        global $user, $base_url;
        drupal_add_js(drupal_get_path('module', 'ses_custom') . '/ses_custom.js');
        drupal_add_css(drupal_get_path('module', 'ses_custom') . '/ses_custom.css');

        // hide or disable form fields based on the user role

        $form['account']['mail']['#disabled'] = true; //['#type'] = 'hidden';
        $disable_cap_fields = true;
        if (isset($form['#user']) &&  !empty($form['#user']->field_alumni_affiliations[LANGUAGE_NONE])) {
            $disable_cap_fields = false;
        }
        drupal_add_js(array('disableCapFields' => $disable_cap_fields), 'setting');
        if ($disable_cap_fields) {
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_address');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_academic_appointments');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_admin_appointments');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_alternate_label');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_alternate_name');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_alternate_title');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_alternate_email');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_alternate_phone');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_bio');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_international');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_courses_taught');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_current_stanford_role');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_document_links');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_education');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_fax');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_grad_fellowship');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_honors_and_awards');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_internet_links');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_keywords');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_lab_affiliations');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_patents');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_personal_interests');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_postdoc_advisees');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_presentations');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_primary_phone');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_primary_email');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_professional_interests');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_professional_orgs');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_profile_id');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_profile_image', 'disable');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_profile_link');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_projects');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_publications');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_research');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_research_short');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_research_terse');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_service_work');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_short_address');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_short_title');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_stanford_advisors');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_work_experience');
            _ses_custom_hide_or_disable_form_field($form, 'field_cap_sunet_id');
        }

        // only allow the non-cap bio field for those with the "allow non-cap profile" field checked
        if (!isset($form['#user']) || !isset($form['#user']->field_ses_non_cap_profile[LANGUAGE_NONE][0]['value']) || intval($form['#user']->field_ses_non_cap_profile[LANGUAGE_NONE][0]['value']) != 1) {
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_non_cap_bio');
        }

        _ses_custom_hide_or_disable_form_field($form, 'field_title', 'disable');
        // field settings for superuser or webeditor
        $allow_admin_tab = false;
        $allow_webeditor_tab = false;
        if ($user->uid == 1) {
            $allow_admin_tab = true;
        } else {
            //_ses_custom_hide_or_disable_form_field($form, 'field_account_directory_name', 'disable');
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_workgroup_membership', 'disable');
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_phd_student', 'disable');
            // _ses_custom_hide_or_disable_form_field($form, 'field_alumni_affiliations', 'disable');
            // _ses_custom_hide_or_disable_form_field($form, 'field_alumni_phd_student', 'disable');
            _ses_custom_hide_or_disable_form_field($form, 'field_secondary_affiliations','disable');
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_research_group', 'disable');
            _ses_custom_hide_or_disable_form_field($form, 'field_earth_system_leadership_w', 'disable');
        }
        if ($user->uid == 1 || in_array('webeditor', $user->roles) || in_array('webmaster', $user->roles)) {
            if (!isset($form['#user']) || empty($form['#user']->field_alumni_affiliations[LANGUAGE_NONE])) {
                _ses_custom_hide_or_disable_form_field($form, 'field_ses_alumni_program');
                _ses_custom_hide_or_disable_form_field($form, 'field_ses_alumni_year');
            }
            $allow_webeditor_tab = true;
        } else {
            _ses_custom_hide_or_disable_form_field($form, 'field_account_directory_name');
            _ses_custom_hide_or_disable_form_field($form, 'field_hide_from_directory');
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_non_cap_profile');
            _ses_custom_hide_or_disable_form_field($form, 'field_research_area');
            _ses_custom_hide_or_disable_form_field($form, 'field_challenge_area');
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_alumni_program');
            _ses_custom_hide_or_disable_form_field($form, 'field_ses_alumni_year');
            _ses_custom_hide_or_disable_form_field($form, 'field_alumni_affiliations');
            _ses_custom_hide_or_disable_form_field($form, 'field_alumni_phd_student');
        }
        drupal_add_js(array('allowAdminTab' => $allow_admin_tab), 'setting');
        drupal_add_js(array('allowWebEditorTab' => $allow_webeditor_tab), 'setting');

        // set up some information and links at the top of the form
        if (isset($form['#user']->field_cap_profile_link[LANGUAGE_NONE][0]['value'])) {
            $cap_verbiage = '<br />Only a small number of profile fields may be edited on this page. The remainder come from either your directory information at <a "href=https://stanfordyou.stanford.edu">StanfordYou</a> or your profile on the Stanford Profiles system which may be edited by clicking this button:<br /><a href="https://cap.stanford.edu/profiles/auth/edit" class="button">Edit Stanford Profile</a><br />Note: if you are editing a profile for someone else, this button will bring you to *your* Stanford profile.';
            $cap_verbiage .= '<br /><br />After editing your information in StanfordYou or the Stanford Profiles system ';
        } else {
            $cap_verbiage = '<br />Most of the information on this profile page comes from your directory information at <"href=https://stanfordyou.stanford.edu">StanfordYou</a>';
            $cap_verbiage .= '<br /><br />After editing your information in StanfordYou ';
        }
        $cap_verbiage .= 'you can wait for the nightly update to see the edits reflected here or you can click this button to update this page immediately: <a href="' . $base_url . '/update_profile/' . $form['#user']->field_cap_sunet_id[LANGUAGE_NONE][0]['value'] . '" class="button">Refresh</a><br />';
        $cap_verbiage .= "<br />Information updated here will *not* be posted back to StanfordYou or Stanford Profiles, but will be displayed only on the School of Earth, Energy & Environmental Sciences directory and profile pages.";
        $form['#prefix'] = '<div>' . $cap_verbiage . '</div>';

    } // user_profile_form
    else if ($form_id == 'webform_client_form_48281') {
        drupal_add_css(drupal_get_path('module', 'ses_custom') . '/ses_custom.css');
    } else if ($form_id == 'earth_news_node_form') {
        if (empty($form['#submit'])) $form['#submit'] = array();
        $form['#submit'][] = '_ses_custom_strip_source_title';
    } else if (substr_compare($form_id, "_node_form", -10, 10) === 0 && isset($form['field_stanford_subsite_sub_tags'])
      && $form_id != 'stanford_subsite_node_form') {
        $form['field_stanford_subsite_sub_tags']['#disabled'] = true;
        if (isset($_GET['field_stanford_subsite_sub_tags']) && is_numeric($_GET['field_stanford_subsite_sub_tags'])) {
            $term = taxonomy_term_load($_GET['field_stanford_subsite_sub_tags']);
            if ($term !== false) {
                $key = array_search($term->name, $form['field_stanford_subsite_subsite']['und']['#options']);
                if ($key !== false) {
                    $form['field_stanford_subsite_subsite']['und']['#default_value'] = strval($key);
                    $form['field_stanford_subsite_subsite']['#disabled'] = true;
                }
            }
        }
    }
}

function _ses_custom_strip_source_title($form, &$form_state) {
    if (!empty($form_state['values']['field_se_news_source'][LANGUAGE_NONE][0]['title'])) {
        $form_state['values']['field_se_news_source'][LANGUAGE_NONE][0]['title'] =
            strip_tags($form_state['values']['field_se_news_source'][LANGUAGE_NONE][0]['title']);
    }
}

function _ses_custom_build_wg_selection($department, $personnel_type)
{
    $dept_array = array();
    switch ($department) {
        case 'deans':
        case 'eess':
        case 'ere':
        case 'ges':
        case 'geophysics':
        case 'eiper':
        case 'esys':
            $dept_array = array($department);
            break;
        default:
            $dept_array = array('deans', 'eess', 'ere', 'ges', 'geophysics', 'eiper', 'esys');
    }
    $ptype_array = array();
    switch ($personnel_type) {
        case 'faculty':
        case 'regular':
        case 'emeritus':
        case 'affiliated':
        case 'postdocs':
        case 'students':
        case 'graduate':
        case 'phd':
        case 'masters':
        case 'undergraduate':
        case 'staff':
        case 'admin':
        case 'research':
        case 'teaching':
            $ptype_array = array($personnel_type);
            break;
        default:
            $ptype_array = array('regular', 'emeritus', 'affiliated', 'postdocs', 'graduate', 'undergraduate', 'admin', 'research', 'teaching');
    }
    $return_array = array('wgs' => array(), 'phds' => 'All');
    foreach ($dept_array as $dept) {
        foreach ($ptype_array as $ptype) {
            if ($dept == 'deans') {
                switch ($ptype) {
                    case 'faculty':
                    case 'regular':
                        $return_array['wgs']['earthsci:' .$dept . '-office-faculty'] =
                            'earthsci:' . $dept . '-office-faculty';
                        break;
                    case 'staff':
                    case 'admin':
                        $return_array['wgs']['earthsci:' . $dept . '-office-staff'] =
                            'earthsci:' . $dept . '-office-staff';
                        break;
                }
            }
            else if ($dept == 'eiper' || $dept == 'esys') {
                switch ($ptype) {
                    case 'faculty':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-regulars'] =
                            'earthsci:' . $dept . '-faculty-regulars';
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-affiliated'] =
                            'earthsci:' . $dept . '-faculty-affiliated';
                        break;
                    case 'regular':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-regulars'] =
                            'earthsci:' . $dept . '-faculty-regulars';
                        break;
                    case 'emeritus':
                        break;
                    case 'affiliated':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-affiliated'] =
                            'earthsci:' . $dept . '-faculty-affiliated';
                        break;
                    case 'students':
                    case 'graduate':
                    case 'phd':
                    case 'masters':
                    case 'undergraduate':
                        if ($dept == 'eiper' && ($ptype == 'students' || $ptype == 'graduate' || $ptype == 'phd')) {
                            $return_array['wgs']['earthsci:' . $dept . '-students-graduate-phd'] = 'earthsci:' . $dept . '-students-graduate-phd';
                        }
                        if (($dept == 'esys' && $ptype != 'undergraduate') || ($dept == 'eiper' && $ptype != 'phd' && $ptype != 'undergraduate')) {
                            $return_array['wgs']['earthsci:' . $dept . '-students-graduate'] = 'earthsci:' . $dept . '-students-graduate';
                        }
                        if ($dept == 'esys' && ($ptype == 'students' || $ptype == 'undergraduate')) {
                            $return_array['wgs']['earthsci:' . $dept . '-students-undergraduate'] = 'earthsci:' . $dept . '-students-undergraduate';
                        }
                        if (count($ptype_array) == 1) {
                            if ($ptype == 'phd') {
                                $return_array['phds'] = '1';
                            } else if ($ptype == 'masters') {
                                $return_array['phds'] = '0';
                            }
                        }
                        break;
                    case 'staff':
                    case 'admin':
                    case 'teaching':
                        if ($dept == 'esys' && ($ptype == 'teaching' || $ptype == 'staff')) {
                            $return_array['wgs']['earthsci:' . $dept . '-staff-teaching'] = 'earthsci:' . $dept . '-staff-teaching';
                        }
                        if ($ptype == 'staff' || $ptype == 'admin') {
                            $return_array['wgs']['earthsci:' . $dept . '-staff-admin'] = 'earthsci:' . $dept . '-staff-admin';
                        }
                        break;
                }
            } else {
                switch ($ptype) {
                    case 'faculty':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-regular'] = 'earthsci:' . $dept . '-faculty-regular';
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-emeritus'] = 'earthsci:' . $dept . '-faculty-emeritus';
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-affiliated'] = 'earthsci:' . $dept . '-faculty-affiliated';
                        break;
                    case 'regular':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-regular'] = 'earthsci:' . $dept . '-faculty-regular';
                        break;
                    case 'emeritus':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-emeritus'] = 'earthsci:' . $dept . '-faculty-emeritus';
                        break;
                    case 'affiliated':
                        $return_array['wgs']['earthsci:' . $dept . '-faculty-affiliated'] = 'earthsci:' . $dept . '-faculty-affiliated';
                        break;
                    case 'postdocs':
                        $return_array['wgs']['earthsci:' . $dept . '-postdocs'] = 'earthsci:' . $dept . '-postdocs';
                        break;
                    case 'students':
                    case 'graduate':
                    case 'phd':
                    case 'masters':
                    case 'undergraduate':
                        if ($ptype != 'undergraduate') {
                            $return_array['wgs']['earthsci:' . $dept . '-students-graduate'] = 'earthsci:' . $dept . '-students-graduate';
                        }
                        if ($dept != 'eess' && ($ptype == 'students' || $ptype == 'undergraduate')) {
                            $return_array['wgs']['earthsci:' . $dept . '-students-undergraduate'] = 'earthsci:' . $dept . '-students-undergraduate';
                        }
                        if (count($ptype_array) == 1) {
                            if ($ptype == 'phd') {
                                $return_array['phds'] = '1';
                            } else if ($ptype == 'masters') {
                                $return_array['phds'] = '0';
                            }
                        }
                        break;
                    case 'staff':
                    case 'admin':
                    case 'research':
                    case 'teaching':
                        if ($ptype == 'staff' || $ptype == 'admin') {
                            $return_array['wgs']['earthsci:' . $dept . '-staff-admin'] = 'earthsci:' . $dept . '-staff-admin';
                        }
                        if ($ptype == 'staff' || $ptype == 'research') {
                            $return_array['wgs']['earthsci:' . $dept . '-staff-research'] = 'earthsci:' . $dept . '-staff-research';
                        }
                        if ($dept == 'eess' && ($ptype == 'staff' || $ptype == 'teaching')) {
                            $return_array['wgs']['earthsci:' . $dept . '-staff-teaching'] = 'earthsci:' . $dept . '-staff-teaching';
                        }
                        break;
                }
            }
        }
    }
    return $return_array;
}

function _ses_custom_wg_validate($form, &$form_state)
{
    $selections = array('wgs'=>array(),'phds'=>'All');
    if ($form['#id'] == 'views-exposed-form-people-ess-all') {
        $selections = _ses_custom_build_wg_selection('eess', $form_state['values']['tmp_associate_type']);
    } else if ($form['#id'] == 'views-exposed-form-people-ere-all') {
        $selections = _ses_custom_build_wg_selection('ere', $form_state['values']['tmp_associate_type']);
    } else if ($form['#id'] == 'views-exposed-form-people-gs-page') {
        $selections = _ses_custom_build_wg_selection('ges', $form_state['values']['tmp_associate_type']);
    } else if ($form['#id'] == 'views-exposed-form-people-gp-page') {
        $selections = _ses_custom_build_wg_selection('geophysics', $form_state['values']['tmp_associate_type']);
    } else if ($form['#id'] == 'views-exposed-form-people-page' ||
        $form['#id'] == 'views-exposed-form-manage-profiles-page' ||
        $form['#id'] == 'views-exposed-form-emergency-contacts-page' ||
        $form['#id'] == 'views-exposed-form-directory-page') {
        if (!empty($form_state['values']['tmp_affiliation'])) {
            $selections = _ses_custom_build_wg_selection($form_state['values']['tmp_affiliation'],
                $form_state['values']['tmp_associate_type']);
        }
    }
    $form_state['values']['field_ses_workgroup_membership_value'] = $selections['wgs'];
    $form_state['values']['field_ses_phd_student_value'] = $selections['phds'];
}

function _ses_custom_eiper_ms_validate($form, &$form_state) {
    $selection = '';
    if (isset($form_state['values']['eiper_ms_degree']) && $form_state['values']['eiper_ms_degree'] > 0  ) {
        $selection = $form['eiper_ms_degree']['#options'][$form_state['values']['eiper_ms_degree']];
    }
    $ms_field_name = '';
    if ($form['#id'] == 'views-exposed-form-people-alumni-ms') {
        $ms_field_name = 'field_ses_alumni_program_value';
    } else if ($form['#id'] == 'views-exposed-form-people-joint-ms') {
        $ms_field_name = 'field_ses_title_override_value';
    }
    if (!empty($ms_field_name)) {
        $form_state['values'][$ms_field_name] = $selection;
    }
}

/*
 * implementation of hook_user_insert called when user logs in
 * for first time or system creates new user account during cron
 */
/*
function ses_custom_user_insert(&$edit, $account, $category)
{
    if (module_exists('wmd4') && isset($edit['authname_wmd4'])) {
        $sunetid = db_query("SELECT authname FROM {authmap} WHERE uid = :uid",array(':uid'=>$account->uid))->fetchField();
        if ($sunetid !== FALSE) {
            $ldap_array = array();
            include_once(drupal_get_path('module','wmd4').'/wmd4.util.inc');
            $ldap_vars = _wmd4_get_ldap_variables();
            $displayname = '';
            if ($ldap_vars !== FALSE) {
                foreach ($ldap_vars as $ldap_var) {
                    if (substr($ldap_var,0,19) == 'wa_ldap_displayname') {
                        $displayname = trim(substr($ldap_var,strpos($ldap_var,':')+1));
                    }
                }
            }
            if (!empty($displayname)) user_save($account,array('name'=>$displayname));
        }
    }
}
*/

/*
 * implementation of hook_ses_cap_lite_preprocess_all
 *
 * return FALSE if we want to abort the profile update
 *
 */
function ses_custom_ses_cap_lite_preprocess_all($sunet = NULL)
{

    // these are set in the settings.php file to use the Workgroups API
    // cancel the update if we don't have them
    // TODO: replace with use of encrypt and the variables table
    global $ses_mais_crt_path, $ses_mais_key_path, $ses_custom_errors;
    $ses_custom_errors = array();
    if (empty($ses_mais_crt_path) || empty($ses_mais_key_path)) {
        watchdog('ses_custom', 'Missing cert file and/or key file for MAIS Workgroup API access');
        $ses_custom_errors[] = 'Missing Workgroup API cert file and/or key file in call to ses_custom_ses_cap_lite_preprocess_all';
        _ses_custom_mail_error_report($ses_custom_errors, 'ses_cap_lite_preprocess_all');
        return FALSE;
    }

    // set up some globals for our hooks
    global $ses_custom_uid_array, $ses_custom_wg_members, $ses_custom_research_affils;
    $ses_custom_uid_array = array();
    $ses_custom_wg_members = array();
    $ses_custom_research_affils = array();

    // read in our wmd4 array matching Drupal uids to SUNet IDs
    $result = db_query("SELECT authname,uid FROM {authmap} WHERE uid in " .
        "(SELECT uid FROM users)");
    foreach ($result as $row) {
        $ses_custom_uid_array[$row->authname] = array('uid' => $row->uid,
            'wgs' => array(),
            'processed' => false,
        );
    }

    // read all of our workgroups and set up the wg_members array
  $se3_wg_members = variable_get('se3_workgroup_members',array());
  foreach ($se3_wg_members['regular'] as $workgroup => $wg_members) {
    if (!empty($wg_members)) {
      $ses_custom_wg_members[$workgroup] = $wg_members;
      foreach ($wg_members as $wg_member) {
        if (!array_key_exists($wg_member['sunet'], $ses_custom_uid_array)) {
          $ses_custom_uid_array[$wg_member['sunet']] = array('uid' => null,
            'wgs' => array());
        }
        $ses_custom_uid_array[$wg_member['sunet']]['wgs'][] = $workgroup;
      }
    }
  }

/*
    $wg_text = trim(variable_get('ses_cap_lite_workgroups', ''));
    $wg_array = array();
    if (!empty($wg_text)) $wg_array = explode("\n", $wg_text);
    foreach ($wg_array as $workgroup_in) {
        $workgroup = trim($workgroup_in);
        watchdog('ses_custom', 'Reading in workgroup: ' . $workgroup);
        $workgroup = trim($workgroup);
        $wg_members = _ses_custom_get_workgroup_members($workgroup,
            $ses_mais_crt_path, $ses_mais_key_path);
        if ($wg_members === FALSE) {
            watchdog('ses_custom', 'Unable to connect to Workgroup Manager for ' . $workgroup . '. Halting process.');
            drupal_set_message('Unable to connect to Workgroup Manager for ' . $workgroup . '. Halting Process.', 'error');
            $ses_custom_errors[] = 'Fatal connection error to Workgroup API in ses_custom_ses_cap_lite_preprocess_all. Halting import.';
            _ses_custom_mail_error_report($ses_custom_errors,'ses_cap_lite_preprocess_all');
            return FALSE;
        } else {
            $ses_custom_wg_members[$workgroup] = $wg_members;
            foreach ($wg_members as $wg_member) {
                if (!array_key_exists($wg_member['sunet'], $ses_custom_uid_array)) {
                    $ses_custom_uid_array[$wg_member['sunet']] = array('uid' => null,
                        'wgs' => array());
                }
                $ses_custom_uid_array[$wg_member['sunet']]['wgs'][] = $workgroup;
            }
        }
    }
*/
    // get research group members while we are at it
  foreach ($se3_wg_members['research'] as $workgroup => $rg_members) {
    if (!empty($rg_members)) {
      $rgroupname = substr($workgroup,16);
      $ses_custom_research_affils[$rgroupname] = $rg_members;
    }
  }

  /*
  $groups = taxonomy_get_tree(1);
    foreach ($groups as $group) {
        if ($group->parents[0] > 0) {
            watchdog('ses_custom', 'Reading in workgroup: earthsci:web-rg-' . $group->name);
            $rg_members = _ses_custom_get_workgroup_members('earthsci:web-rg-' . $group->name,
                $ses_mais_crt_path, $ses_mais_key_path);
            if ($rg_members === FALSE) {
                watchdog('ses_custom', 'Unable to connect to Workgroup Manager. Halting process.');
                drupal_set_message('Unable to connect to Workgroup Manager. Halting process.', 'error');
                $ses_custom_errors[] = 'Fatal connection error to Workgroup API in ses_custom_ses_cap_lite_preprocess_all. Halting import.';
                _ses_custom_mail_error_report($ses_custom_errors,'ses_cap_lite_preprocess_all');
                return FALSE;
            } else {
                $ses_custom_research_affils[$group->name] = $rg_members;
            }
        }
    }
  */
    return TRUE;
}

/*
 * implementation of hook_ses_cap_lite_preprocess_sunet
 *
 */
function ses_custom_ses_cap_lite_preprocess_sunet($sunet, $group = NULL)
{

    global $ses_custom_uid_array, $ses_custom_wg_members;

    $uid = null;
    $wgs = array();
    $wg_member = array();
    foreach ($ses_custom_wg_members as $wg_name => $wg_members) {
            if (isset($wg_members[$sunet])) {
                $wgs[] = $wg_name;
                $workgroup = $wg_name;
                $wg_member = $wg_members[$sunet];
            }
    }
    if (array_key_exists($sunet, $ses_custom_uid_array)) {
        $uid = $ses_custom_uid_array[$sunet]['uid'];
    }

    $processed = false;
    if (count($wgs)>0) {
        $ses_custom_uid_array[$sunet]['wgs'] = $wgs;
        watchdog('ses_custom','Updating account information for :'.$sunet);
        $uid = _ses_custom_update_single_account($sunet, $uid, $wg_member, $workgroup);
        if (!empty($uid)) {
            $ses_custom_uid_array[$sunet]['uid'] = $uid;
            $processed = true;
        } else {
            watchdog('ses_custom', 'No user account found or created for: ' . $sunet);
        }
    } else {
        watchdog('ses_custom', $sunet . ' was not found in any workgroup.');
    }
    return $processed;
}

/*
 * implementation of hook_ses_cap_lite_preprocess_wg
 * 
 * return the workgroup count
 *
 */
function ses_custom_ses_cap_lite_preprocess_wg($group)
{

    global $ses_custom_uid_array, $ses_custom_wg_members;

    // get the workgroup members as an array
    if (!array_key_exists($group, $ses_custom_wg_members)) {
        watchdog('ses_custom', 'Unable to get workgroup members for ' . $group);
        $wg_count = FALSE;
    }
    $wg_members = $ses_custom_wg_members[$group];
    if (empty($wg_members)) {
        watchdog('ses_custom', 'Empty workgroup. No members for ' . $group);
        $wg_count = 0;
    } else {
        $wg_count = count($wg_members);
        // for each person in the workgroup, get their SUNet ID
        foreach ($wg_members as $wg_member) {
            $sunet = $wg_member['sunet'];
            $uid = null;
            $processed = false;
            if (array_key_exists($sunet, $ses_custom_uid_array)) {
                $uid = $ses_custom_uid_array[$sunet]['uid'];
                if (isset($ses_custom_uid_array[$sunet]['processed'])) {
                    $processed = $ses_custom_uid_array[$sunet]['processed'];
                }
            }
            if (!$processed) {
                $uid = _ses_custom_update_single_account($sunet, $uid, $wg_member, $group);
                if (!empty($uid)) {
                    $ses_custom_uid_array[$sunet]['uid'] = $uid;
                    $ses_custom_uid_array[$sunet]['processed'] = true;
                }
            }
        } // for each member
    } // if workgroup has members
    return $wg_count;
}

// update or create a user account for each person in our workgroup
function _ses_custom_update_single_account($sunet = '', $uid = null,
                                           $wg_member = array(), $group = null)
{

    if (empty($sunet)) return FALSE;

    $account = null;
    // if they already have an account, load it, otherwise create account
    if (!empty($uid)) {
        $account = user_load($uid);
        // don't process blocked users unless found in a workgroup
        if ($account !== false && $account->status == 0) {
            if (!empty($group)) {
                watchdog('ses_custom', 'Blocked user found in workgroup: '.$group.'. Resetting to active: ' . $account->name . ' ' . $account->mail);
            } else {
                return $uid;
            }
        }
    } else {
        //set up the user fields
        $role_array = array(DRUPAL_AUTHENTICATED_RID => 'authenticated user');
        $rid = variable_get('wmd4_default_role');
        if (!empty($rid)) $role_array[$rid] = 'SUNet User';
        if (empty($wg_member)) {
            $wg_member['account_name'] = $sunet;
            $wg_member['directory_name'] = $sunet;
        }
        $fields = array(
            'name' => $wg_member['account_name'],
            'mail' => $sunet . '@stanford.edu',
            'pass' => user_password(8),
            'status' => 1,
            'init' => $sunet,
            'roles' => $role_array,
        );
        //the first parameter is left blank so a new user is created
        watchdog('user', 'creating user ' . $wg_member['account_name']);
        $account = user_save('', $fields);
        $uid = $account->uid;
        // update tables for external users
        db_insert('authmap')->fields(array('uid' => $account->uid, 'authname' => $sunet, 'module' => 'wmd4'))->execute();
    }  // if create user

    // make sure our affiliations and personnel type, and directory name are correct
    global $ses_custom_uid_array, $ses_custom_research_affils;

    // build workgroup and affiliations arrays
    $wg_array = array(LANGUAGE_NONE => array());
    $affils_array = array(LANGUAGE_NONE => array());
    if (!empty($ses_custom_uid_array[$sunet]['wgs'])) {
        foreach ($ses_custom_uid_array[$sunet]['wgs'] as $workgroup) {
            $wg_array[LANGUAGE_NONE][] = array('value' => $workgroup);
            $dept = _ses_custom_get_workgroup_affiliation($workgroup);
            if ($dept !== FALSE && !in_array($dept,$affils_array)) {
                $affils_array[LANGUAGE_NONE][] = array('value' => $dept);
            }
        }
    }

    // see if this is a phd student so we don't overwrite, but make sure the field gets set
    // we will reset this when the cap record is processed
    $phd_student = '0';
    if (!empty($wg_array[LANGUAGE_NONE]) && isset($account->field_ses_phd_student)) {
        $phd_student = $account->field_ses_phd_student[LANGUAGE_NONE][0]['value'];
    }

    // fill the research array
    $research_array = array();
    foreach ($ses_custom_research_affils as $affil_key => $affil_array) {
        if (array_key_exists($sunet, $affil_array)) {
            $tid_array = taxonomy_get_term_by_name($affil_key, 'vocabulary_1');
            if (!empty($tid_array)) {
                $tid = 0;
                foreach ($tid_array as $tid_key => $tid_obj) {
                    $tid = $tid_key;
                }
                if ($tid > 0) $research_array[LANGUAGE_NONE][] = array('tid' => $tid);
            }
        }
    }
    $edit = array('status' => 1,
        'field_ses_workgroup_membership' => $wg_array,
        'field_ses_phd_student' => array('und' => array(array('value' => $phd_student))),
        'field_secondary_affiliations' => $affils_array,
        'field_ses_research_group' => $research_array,
        'field_account_directory_name' => array('und' => array(array('value' => $wg_member['directory_name']))));

    // only set the account name if empty
    if (empty($account->name)) $edit['name'] = $wg_member['account_name'];
    if (empty($account->field_cap_sunet_id)) {
        $edit['field_cap_sunet_id'] = array(LANGUAGE_NONE => array(array('value' => $sunet, 'format' => variable_get('ses_cap_lite_filter_format', filter_fallback_format()))));
    }

    $account = user_save($account, $edit);
    return $uid;
}

/*
 * implementation of hook_ses_cap_lite_entity_alter
 *
 * returns the uid of the user whose account we are
 * updating with profile information.
 *
 */
function ses_custom_ses_cap_lite_entity_alter(&$entity_data)
{

    global $ses_custom_uid_array;

    $sunet = $entity_data['sunet'];
    if (array_key_exists($sunet, $ses_custom_uid_array)) {
        $uid = $ses_custom_uid_array[$sunet]['uid'];
        $user = user_load($uid);
        if (isset($user->field_ses_non_cap_profile[LANGUAGE_NONE][0]['value']) &&
            $user->field_ses_non_cap_profile[LANGUAGE_NONE][0]['value'] == 1
        ) {
            $entity_data['cancel_update'] = TRUE;
        }
    } else {
        $uid = -1;
    }
    if ($uid > 1) $entity_data['profile_entity_id'] = $uid;
}

/*
 * implementation hook_ses_cap_lite_presave_alter
 *
 * we will replace the word "Petroleum" with "Energy Resources"
 * and other things...
 *
 */
function ses_custom_ses_cap_lite_presave_alter(&$fields, $profileObj = NULL)
{

    global $ses_custom_wg_members;

    /* if the profile is not for faculty, we don't want any academic appointment items from CAP */
    if (!empty($fields['field_cap_academic_appointments']) && isset($profileObj)
        && !empty($profileObj->field_ses_workgroups_membership[LANGUAGE_NONE])
    ) {
        $faculty = false;
        foreach ($profileObj->field_ses_workgroups_membership[LANGUAGE_NONE] as $affil) {
            if (strpos($affil['value'], 'faculty') !== false) {
                $faculty = true;
                break;
            }
        }
        if (!$faculty) $fields['field_cap_academic_appointments'] = array();
    }

    /* in the title, remove 'admitted year' and change 'petroleum' to 'energy resources' */
    if (isset($fields['field_cap_short_title'][LANGUAGE_NONE][0]['value'])) {
        $shortie = $fields['field_cap_short_title'][LANGUAGE_NONE][0]['value'];
        $ushortie = strtoupper($shortie);
        if (strpos($shortie, ', admitted') !== FALSE) {
            $shortie = substr($shortie, 0, strpos($shortie, ', admitted'));
        }
        $fields['field_cap_short_title'][LANGUAGE_NONE][0]['value'] = str_replace('Petroleum', 'Energy Resources', $shortie);

        // see if this is a PhD student by looking at the EIPER workgroup and the CAP title and set the phd_student field
        $fields['field_ses_phd_student'] = array(LANGUAGE_NONE => array(array('value' => "0")));
        if (array_key_exists($fields['field_cap_sunet_id'][LANGUAGE_NONE][0]['value'],
                $ses_custom_wg_members['earthsci:eiper-students-graduate-phd']) ||
            strpos($ushortie, 'PHD') !== false || strpos($ushortie, 'PH.D') !== false
        ) {
            $fields['field_ses_phd_student'][LANGUAGE_NONE][0]['value'] = "1";
        }
    }

}

/*
 * implementation of workgroup postprocess hook
 */
/*
function ses_custom_ses_cap_lite_postprocess_wg($group='', $data=array()) {
    if (isset($data['values']) && is_array($data['values']) && strpos($group,'faculty-regular') !== FALSE) {
        foreach ($data['values'] as $member) {
            $member_name = $member['displayName'];
            if (isset($member['honorsAndAwards'])) {
                foreach ($member['honorsAndAwards'] as $honor) {
                    $newObj = (object) NULL;
                    $newObj->type = 'honors_and_awards_prototype';
                    $newObj->title = $member_name;
                    $newObj->uid = 1;
                    $newObj->created = strtotime("now");
                    $newObj->changed = strtotime("now");
                    $newObj->status = 1;
                    $newObj->comment = 0;
                    $newObj->promote = 0;
                    $newObj->moderate = 0;
                    $newObj->sticky = 0;
                    $newObj->translate = 0;
                    $newObj->language = LANGUAGE_NONE;
                    $newObj->field_ses_honors_org = 
                        array(LANGUAGE_NONE=>array(
                            array('value'=>$honor['organization'])));
                    $newObj->field_ses_honors_title =
                        array(LANGUAGE_NONE=>array(
                            array('value'=>$honor['title'])));
                    $newObj->field_ses_honors_dates =
                        array(LANGUAGE_NONE=>array(
                            array('value'=>$honor['dates'])));
                    node_save($newObj);
                }
            }
        }
    }
}
*/

/*
 * implementation of postprocess hook when all cap profiles are done
 *
 * we want to go through our list of accounts and block any user no longer in a workgroup
 *
 */
function ses_custom_ses_cap_lite_postprocess_all($single_sunet = NULL)
{
    global $ses_custom_uid_array,$ses_custom_errors;
    $ses_custom_count = 0;
    watchdog('ses_custom', 'Post processing accounts. Checking LDAP for contact info.');
    if (isset($single_sunet)) {
        if (isset($ses_custom_uid_array[$single_sunet]['uid'])) {
            _ses_custom_update_contact_from_ldap($single_sunet, intval($ses_custom_uid_array[$single_sunet]['uid']));
            $ses_custom_count = 1;
        }
    } else {
        $ses_custom_count = 0;
        // get an array of users explicitly allowed by wmd4 module
        $allowed_users = array();
        $users_text = trim(variable_get('wmd4_require_users', ''));
        $temp_users = array();
        if (!empty($users_text)) $allowed_users = explode("\n", $users_text);
        foreach ($temp_users as $wmd_user) {
            $allowed_users[] = trim($wmd_user);
        }
        // if a user account was not in any of our workgroups
        foreach ($ses_custom_uid_array as $sunet => $subarray) {
            $ses_custom_count += 1;
            if (empty($subarray['wgs'])) {
                // check if they are explicitly allowed via wmd module
                if (!in_array($sunet, $allowed_users)) {
                    // if they are not explicitly allowed, check if they are alumni
                    $old_user = user_load(intval($subarray['uid']));
                    if ($old_user !== FALSE && intval($old_user->status) !== 0) {
                        $edit = array();
                        if (!empty($old_user->field_alumni_affiliations)) {
                            // they are listed somewhere as alumni, so keep
                            // their account active but remove workgroup info
                            $edit['field_ses_workgroup_membership'] = array();
                            $edit['field_ses_phd_student'] = array();
                        } else {
                            // at this point they have no business with an account
                            // so block them
                            watchdog('ses_custom','blocking former affiliate: '.$old_user->uid.' '.$old_user->name);
                            $edit['status'] = 0;
                        }
                        if (!empty($edit)) {
                            user_save($old_user, $edit);
                        }
                    }
                }
            } else {
                 _ses_custom_update_contact_from_ldap($sunet,intval($subarray['uid']));
            }
        }
    }
    watchdog('ses_custom', 'Number of user accounts processed: ' . $ses_custom_count);
    if (!empty($ses_custom_errors)) {
        $ses_custom_errors[] = 'LDAP Errors from ses_cap_lite import postprocess.';
        _ses_custom_mail_error_report($ses_custom_errors,'ses_cap_lite_postprocess_all');
    }
    return TRUE;
}

function _ses_custom_update_contact_from_ldap($sunet = NULL, $uid = 0)
{
    if ($uid > 0 && isset($sunet)) {
        // get contact info from ldap
        $user = user_load($uid);
        if ($user !== FALSE) {
            $edit = array('field_cap_primary_phone' => array(),
                'field_cap_primary_email' => array(),
                'field_cap_fax' => array(),
                'field_cap_address' => array(),
                'field_cap_short_address' => array(),
            );
            $ldap_result = _ses_custom_get_ldap_contact($sunet);
            if ($ldap_result !== FALSE) {
                foreach ($ldap_result as $varname => $varresult) {
                    $output = array();
                    if ($varname === 'field_cap_primary_phone') {
                        foreach ($varresult as $phone_num) {
                            $output[] = array('value' => $phone_num);
                        }
                    } else if ($varname === 'field_cap_short_title') {
                        if (empty($user->field_cap_short_title[LANGUAGE_NONE][0]['value'])) {
                            $output[] = array('value' => $varresult);
                        } else {
                            break;
                        }
                    } else {
                        $output[] = array('value' => $varresult);
                    }
                    $output = array(LANGUAGE_NONE => $output);
                    $edit[$varname] = $output;
                }
            }
            user_save($user, $edit);
        }
    }
}

function _ses_custom_get_workgroup_affiliation($workgroup_name = NULL)
{
    if (empty($workgroup_name)) return FALSE;
    $dash = strpos($workgroup_name, '-');
    if ($dash === FALSE) return FALSE;

    $affil = substr($workgroup_name, 0, $dash);
    switch ($affil) {
        case 'earthsci:deans':
            $affil_str = "Dean's Office";
            break;
        case 'earthsci:eess':
            $affil_str = 'ESS';
            break;
        case 'earthsci:eiper':
            $affil_str = 'E-IPER';
            break;
        case 'earthsci:ere':
            $affil_str = 'ERE';
            break;
        case 'earthsci:esys':
            $affil_str = 'Earth Systems';
            break;
        case 'earthsci:geophysics':
            $affil_str = 'Geophysics';
            break;
        case 'earthsci:ges':
            $affil_str = 'GS';
            break;
        default:
            $affil_str = FALSE;

    }
    return $affil_str;
}

function _ses_custom_store_regular_workgroups() {
  // read all of our workgroups and set up the wg_members array
  $wg_text = trim(variable_get('ses_cap_lite_workgroups', ''));
  $wg_array = array();
  if (!empty($wg_text)) $wg_array = explode("\n", $wg_text);
  _ses_custom_store_workgroup_members('regular', $wg_array, true);
}

function _ses_custom_store_research_workgroups() {
  // get research group list
  $groups = taxonomy_get_tree(1);
  $wg_array = array();
  if (!empty($groups)) {
    foreach ($groups as $group) {
      if ($group->parents[0] > 0) {
        $wg_array[] = 'earthsci:web-rg-' . $group->name;
      }
    }
  }
  _ses_custom_store_workgroup_members('research', $wg_array, true);
}

function _ses_custom_store_workgroup_members($wg_set = '', $wg_array = array(), $reset_set = false) {
  if (is_array($wg_array) && !empty($wg_set)) {
    $wg_updates = array();
    foreach ($wg_array as $wg) {
      $wg_trim = trim($wg);
      $wg_updates[$wg_trim] = _ses_custom_get_workgroup_members($wg_trim);
    }
    $wg_members = variable_get('se3_workgroup_members',array());
    if ($reset_set) {
      $wg_members[$wg_set] = array();
    }
    if (!empty($wg_updates)) {
      foreach ($wg_updates as $wg => $wg_peeps) {
        $wg_members[$wg_set][$wg] = array();
        if (!empty($wg_peeps)) {
          $wg_members[$wg_set][$wg] = $wg_peeps;
        }
      }
    }
    variable_set('se3_workgroup_members',$wg_members);
  }
}

function _ses_custom_get_workgroup_members($workgroup_name, $cert_file = NULL, $key_file = NULL)
{

    global $ses_custom_errors;

    $url = "https://sesincub.stanford.edu/mais/workgroup_api_proxy.php?workgroup=" . $workgroup_name;
    // create a curl session to get the workgroup data
    $ch = curl_init();

    $options = array(
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_FOLLOWLOCATION => false,
        CURLOPT_SSL_VERIFYHOST => false,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_USERAGENT => 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)',
        CURLOPT_URL => $url,
        //CURLOPT_SSLCERT => $cert_file,
        //CURLOPT_SSLKEY => $key_file,
        CURLOPT_FORBID_REUSE => true, 
        CURLOPT_FRESH_CONNECT => true, 
    );
    curl_setopt_array($ch, $options);
    $members = array();
    $output = curl_exec($ch);
    if ($output === false) {
        // if $output is false, report a curl error
        $curl_error = 'Curl Error: ' . curl_error($ch);
        watchdog('ses_custom', $curl_error.' ' . $url);
        $ses_custom_errors[] = 'Curl error in call to _ses_custom_get_workgroup_members for ' . $url . ': ' . $curl_error;
        $members = false;
    } else {
        $members = drupal_json_decode($output);
        watchdog('ses_custom','workgroup '.$workgroup_name.' count: '.count($members));
    }
    curl_close($ch);
    // return our list of people from the workgroup
    return $members;

}

function _ses_custom_get_ldap_contact($sunet, $search_by = 'uid')
{
    global $ses_custom_errors;

    $ldapError = '';
    $ldapok = FALSE;
    $result_out = array();
    $ldap = ldap_connect("ldap://ldap.stanford.edu");
    if ($ldap) {
        $ldapok = ldap_bind($ldap);
    }
    if (!$ldapok) {
        watchdog('ses_custom', 'Unable to connect to Stanford LDAP Server.');
        $ses_custom_errors[] = 'LDAP credentials missing in call to _ses_custom_get_ldap_contact for ' . $sunet;
        return FALSE;
    }
    $ldapok = ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);
    if ($ldapok) {
        $dn = "cn=people,dc=stanford,dc=edu";
        $ldapok = FALSE;
        $filter = "(|(" . $search_by . "=" . $sunet . "))";
        $result = ldap_search($ldap, $dn, $filter);
        if ($result) {
            $info = ldap_get_entries($ldap, $result);
            if (isset($info) && is_array($info) & isset($info[0])) {
                if (isset($info[0]['telephonenumber']['count'])) {
                    if ($info[0]['telephonenumber']['count'] > 0) {
                        $phoneNumbers = array();
                        for ($i = 0; $i < $info[0]['telephonenumber']['count']; $i++) {
                            $phoneNumbers[] = $info[0]['telephonenumber'][$i];
                        }
                    }
                    $result_out['field_cap_primary_phone'] = $phoneNumbers;
                }
                if (isset($info[0]['mail'])) {
                    $result_out['field_cap_primary_email'] = $info[0]['mail'][0];
                }
                if (isset($info[0]['facsimiletelephonenumber'])) {
                    $result_out['field_cap_fax'] = $info[0]['facsimiletelephonenumber'][0];
                }
                if (isset($info[0]['postaladdress'])) {
                    $result_out['field_cap_address'] = $info[0]['postaladdress'][0];
                }
                if (isset($info[0]['sugwaffiladdress1'])) {
                    $add_str = $info[0]['sugwaffiladdress1'][0];
                    if (substr($add_str, 0, 11) === '1:1:office:') {
                        $short_str = substr($add_str, 11, strpos($add_str, '|') - 11);
                        if ($short_str !== FALSE) {
                            $result_out['field_cap_short_address'] = $short_str;
                        }
                    }
                }
                if (isset($info[0]['sugwaffiliation1'])) {
                    $add_strs = explode('|', $info[0]['sugwaffiliation1'][0]);
                    $short_str = '';
                    foreach ($add_strs as $add_str) {
                        if (!empty($short_str)) $short_str .= ' ';
                        $short_str .= $add_str;
                    }
                    $result_out['field_cap_short_title'] = $short_str;
                }
                $ldapok = TRUE;
            }
        }
    }
    ldap_close($ldap);
    if (!$ldapok) {
        $msg = 'LDAP lookup for ' . $sunet . ' failed.';
        if (!empty($ldapError)) $msg .= ': ' . $ldapError;
        watchdog('ses_custom', $msg);
        $ses_custom_errors[] = $msg;
        $result_out = FALSE;
    }
    return $result_out;
}

function ses_custom_user_presave(&$edit, $account, $category)
{

    if (isset($account->original->field_cap_profile_image)) {
        if (empty($edit)) $edit = array();
        if (!isset($edit['field_cap_profile_image'])) {
            $edit['field_cap_profile_image'] = $account->original->field_cap_profile_image;
        }
    }
    if (isset($edit['field_ses_image_override_'][LANGUAGE_NONE][0])) {
        if (empty($edit['field_ses_image_override_'][LANGUAGE_NONE][0]['alt'])) {
            $alt_str = 'Override profile image';
            if (!empty($edit['name'])) $alt_str .= ' for ' . $edit['name'];
            $edit['field_ses_image_override_'][LANGUAGE_NONE][0]['alt'] = $alt_str;
        }
    }
}

function _ses_custom_personnel_terms($personnel_type, $title = NULL, $tid_input = array(), $affiliation = NULL)
{

    $tid_array = array();
    if (isset($tid_input[LANGUAGE_NONE]) && is_array($tid_input[LANGUAGE_NONE])) {
        foreach ($tid_input[LANGUAGE_NONE] as $tid) {
            $tid_array[$tid['tid']] = $tid['tid'];
        }
    }

    $term_array = array();
    switch ($personnel_type) {
        case 'Administrative Staff':
            $term_array[] = 'Administrative Staff';
            $term_array[] = 'All Staff';
            break;
        case 'Research Staff':
            $term_array[] = 'Research Staff';
            $term_array[] = 'All Staff';
            break;
        case 'Teaching Staff':
            $term_array[] = 'Teaching Staff';
            $term_array[] = 'All Staff';
            break;
        case 'Faculty - Regular':
            $term_array[] = 'Regular Faculty';
            $term_array[] = 'All Faculty';
            break;
        case 'Faculty - Emeritus':
            $term_array[] = 'Emeritus Faculty';
            $term_array[] = 'All Faculty';
            break;
        case 'Faculty - Affiliated':
            $term_array[] = 'Affiliated Faculty';
            $term_array[] = 'All Faculty';
            break;
        case 'Post Doctoral Scholar':
            $term_array[] = 'Post Doctoral Scholar';
            break;
        case 'Students - Undergraduate':
            $term_array[] = 'Undergraduate Students';
            $term_array[] = 'All Students';
            break;
        case 'Students - Graduate':
            $term_array[] = 'All Graduate Students';
            $term_array[] = 'All Students';
            $tid_phd_key = array_keys(taxonomy_get_term_by_name('PhD Students', 'profile_personnel_types'));
            if (array_key_exists(0, $tid_phd_key)) unset($tid_array[$tid_phd_key[0]]);
            $tid_masters_key = array_keys(taxonomy_get_term_by_name('Masters Students', 'profile_personnel_types'));
            if (array_key_exists(0, $tid_masters_key)) unset($tid_array[$tid_masters_key[0]]);
            if (!empty($title) && (empty($affiliation) || strcmp($affiliation, 'E-IPER') !== 0) &&
                (strpos($title, 'Ph.D.') !== FALSE || strpos($title, 'PhD') !== FALSE)
            ) {
                $term_array[] = 'PhD Students';
            } else {
                $term_array[] = 'Masters Students';
            }
            break;
        case 'Students - PhD':
            $tid_masters_key = array_keys(taxonomy_get_term_by_name('Masters Students', 'profile_personnel_types'));
            if (array_key_exists(0, $tid_masters_key)) unset($tid_array[$tid_masters_key[0]]);
            $term_array[] = 'All Graduate Students';
            $term_array[] = 'All Students';
            $term_array[] = 'PhD Students';
            break;
    }
    foreach ($term_array as $term) {
        $tid_result = taxonomy_get_term_by_name($term, 'profile_personnel_types');
        $tid_keys = array_keys($tid_result);
        if (array_key_exists(0, $tid_keys)) {
            $tid_array[$tid_keys[0]] = $tid_keys[0];
        }
    }

    $tid_out = array();
    if (!empty($tid_array)) {
        $tid_out[LANGUAGE_NONE] = array();
        foreach ($tid_array as $key => $tid) {
            $tid_out[LANGUAGE_NONE][] = array('tid' => $key);
        }
    }
    return $tid_out;
}

function earth_keen_preprocess_views_view(&$vars)
{
    $view = $vars['view'];
    switch ($view->name) {
        case 'people':
            drupal_add_js(drupal_get_path('module', 'ses_custom') . '/ses_custom_people.js');
            break;
        case 'sensory_earth':
            drupal_add_css(drupal_get_path('module', 'ses_custom') . '/ses_custom_sensory_earth.css');
            drupal_add_js(drupal_get_path('module', 'ses_custom') . '/ses_custom_sensory_earth.js');
            break;
        case 'agu_cartoons_2014':
            drupal_add_css(drupal_get_path('module', 'ses_custom') . '/ses_custom_agu_cartoons.css');
            break;
    }
}

// generate the add sunet user input form
function ses_custom_add_sunet_user_form($form_state)
{
    $default_type = 'staff-admin';
    if (!empty($_SESSION['add_sunet_user_type'])) $default_type = $_SESSION['add_sunet_user_type'];
    $default_affil = 'deans-office';
    if (!empty($_SESSION['add_sunet_user_affil'])) $default_affil = $_SESSION['add_sunet_user_affil'];
    $form['user_list'] = array(
        '#title' => t('SUNet ID of user to add'),
        '#type' => 'textfield',
        '#description' => t('Please enter a single SUNet ID.'),
        '#required' => TRUE,
    );
    $form['personnel_type'] = array(
        '#type' => 'select',
        '#title' => t('Personnel Type'),
        '#default_value' => $default_type,
        '#options' => array(
            'faculty-regular' => 'Faculty - Regular',
            'faculty-emeritus' => 'Faculty - Emeritus',
            'faculty-affiliated' => 'Faculty - Affiliated',
            'students-graduate' => 'Students - Graduate',
            'students-graduate-phd' => 'Students - PhD',
            'students-undergraduate' => 'Students - Undergraduate',
            'postdocs' => 'Post Doctoral Scholar',
            'staff-research' => 'Research Staff',
            'staff-admin' => 'Administrative Staff',
            'staff-teaching' => 'Teaching Staff',
        ),
    );
    $form['affiliation'] = array(
        '#type' => 'select',
        '#title' => 'Affiliation',
        '#default_value' => $default_affil,
        '#options' => array(
            'deans-office' => "Dean's Office",
            'esys' => 'Earth Systems',
            'ere' => 'ERE',
            'eess' => 'ESS',
            'eiper' => 'E-IPER',
            'ges' => 'GS',
            'geophysics' => 'Geophysics',
        ),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    return $form;
}

// generate a clean array of SUNet IDs (or display names) of profiles to delete
function ses_custom_add_sunet_user_form_submit($form, &$form_state)
{
    $ptype = $form_state['values']['personnel_type'];
    $affil = $form_state['values']['affiliation'];
    if ($affil === 'deans-office') {
        $ptype = 'staff';
    }
    $workgroup = 'earthsci:' . $affil . '-' . $ptype;
    $sunet = $form_state['values']['user_list'];

    if (!ses_custom_ses_cap_lite_preprocess_all($sunet)) {
        drupal_set_message('Please try again later.', 'error');
        drupal_goto($base_url . '/add_sunet_user');
    };

    global $base_url;
    if (ses_custom_ses_cap_lite_preprocess_sunet($sunet, $workgroup)) {
        drupal_goto($base_url . '/update_profile/' . $sunet);
    } else {
        drupal_goto($base_url . '/add_sunet_user');
    }
}


function ses_custom_action_info()
{
    $operations = array(
        '_ses_custom_convert_to_alumni' => array(
            'type' => 'user',
            'label' => t("Convert selected users' profiles to type Alumni"),
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        '_ses_custom_convert_to_non_cap' => array(
            'type' => 'user',
            'label' => t("Allow non-CAP profile for user"),
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
    );
    return $operations;
}

function _ses_custom_convert_to_alumni(&$entity, $context = array())
{
    $edit = array(
                    'field_alumni_affiliations' => $entity->field_ses_workgroup_membership,
                    'field_alumni_phd_student' => $entity->field_ses_phd_student,
    );
    user_save($entity,$edit);
}

function _ses_custom_convert_to_non_cap(&$entity, $context = array())
{
    $edit = array('field_ses_non_cap_profile' => array('und' => array(array('value' => 1))));
    user_save($entity,$edit);
}

function ses_custom_ses_cap_lite_field_array_alter(&$cap_fields)
{
    $cap_fields['titles'] = array(
        'field_type' => 'text_long',
        'build_callback' => '_ses_custom_academic_appointments_list'
    );
}

/*
 * This is a customized version of a routine used to format CAP fields containing 0 to n elements,
 * each entered separately in the CAP system. Examples are education and workExperience
 *
 * The field is constructed using <ul> and <li> tags
 */
function _ses_custom_academic_appointments_list($capData = array(), $cap_field)
{
    if (empty($cap_field) || !isset($capData[$cap_field])) return array();
    $capDataItem = $capData[$cap_field];
    if (empty($capDataItem) || !is_array($capDataItem)) {
        $output = array();
    } else {
        $dupes = array();
        $output = '<div class="' . $cap_field . '-div"><ul class="' . $cap_field . '-ul">';
        foreach ($capDataItem as $lineitem) {
            $appt = $lineitem['label']['text'];
            if (!in_array($appt, $dupes)) {
                $dupes[] = $appt;
                $output .= '<li class="' . $cap_field . '-li">' . $lineitem['label']['html'] . '</li>';
            }
        }
        $output .= '</ul></div>';
        $output = array(LANGUAGE_NONE => array(array('value' => $output,
            'format' => variable_get('ses_cap_lite_filter_format', filter_fallback_format()))));
    }
    return $output;
}

/*
// function commented out by ksharp on 3/18/2016 to restore duplicate titles
function ses_custom_query_alter(QueryAlterableInterface $query)
{
    if ($query->hasTag('views')) {
        $viewGroup = $query->getMetaData('view');
        $view =& $viewGroup;
        if (isset($view->name) && ($view->name === 'events' || $view->name === 'event_calendar')) {
            $query->groupBy('title');
        }
    }
}
*/


function ses_custom_views_pre_render(&$view)
{
    // before we render the events view, weed out any duplicates
    // duplicates arise because the stanford event content type contains events from many different
    // events feeds, and some events are bookmarked from other feeds.
    if (isset($view->name) && isset($view->result) && is_array($view->result) &&
        ($view->name === 'events' || $view->name === 'event_calendar') && count($view->result) > 1) {

        // the feeds module keeps a table of imported events, each with a unique GUID. When the event is bookmarked in
        // another feed it is recorded in the table with the same GUID. First set an array of guids for nodes in the
        // view display and another to record duplicates
        $guids = array();
        $duplicates = array();

        // get the list of nids from $view->result and query the feeds_item table for them, saving the GUID and
        // import timestamp for each event
        $event_nodes_list = '(';
        foreach ($view->result as $key => $value) {
            $event_nodes_list .= $value->nid . ', ';
        }
        $event_nodes_list .= '0);';
        $result = db_query("SELECT entity_id, guid, imported FROM {feeds_item} WHERE entity_id in " . $event_nodes_list);
        foreach ($result as $row) {
            // look at the GUID for each event. If it is already in the $guids array, then it is a duplicate
            // and we want to get rid of the older of the we are looking at vs the one already in the array
            if (array_key_exists($row->guid,$guids)) {
                if (intval($row->imported) < intval($guids[$row->guid]['imported'])) {
                    // the new one was imported earlier, so we will treat it as the duplicate and store its
                    // nid in the duplicates array
                    $duplicates[] = $row->entity_id;
                } else {
                    // the new one was imported later, so we will put the nid of the stored event in the
                    // duplicates array and save the entity_id and imported timestamp to the guids array
                    $duplicates[] = $guids[$row->guid]['entity_id'];
                    $guids[$row->guid]['entity_id'] = $row->entity_id;
                    $guids[$row->guid]['imported'] = $row->imported;
                }
            } else {
                // the current event is not in the guids array, so is not a duplicate (yet) and can be stored
                $guids[$row->guid] = array('entity_id' => $row->entity_id, 'imported' => $row->imported);
            }
        }

        // go back through the list of nids in the view and remove any in our duplicates list
        foreach ($view->result as $key => $value) {
            if (in_array($value->nid,$duplicates)) {
                unset($view->result[$key]);
            }
        }
        // reindex the results array now free of duplicates
        $view->result = array_values($view->result);
    }
}

function _ses_custom_cartoon_permalink($nid)
{

    $view = views_get_view('agu_cartoons_2014');
    $view->set_display('main-page');
    $view->set_items_per_page(0);
    $view->pre_execute();
    $view->execute();
    $params = array();
    if (!empty($view->result)) {
        foreach ($view->result as $key => $node) {
            if ($node->nid == $nid) {
                $params['query'] = array('page' => $key);
                break;
            }
        }
    }
    drupal_goto('agu-cartoons-2014', $params);
}

function _ses_custom_get_html_substr($output, $search_str)
{
    $return_str = FALSE;
    $first = strpos($output, $search_str);
    if ($first !== FALSE) {
        $first += strlen($search_str);
        $second = strpos($output, '"', $first);
        if ($second !== FALSE) {
            $return_str = substr($output, $first, $second - $first);
        }
    }
    return $return_str;
}

function ses_custom_views_post_render(&$view, &$output, &$cache)
{
    if ($view->name == 'agu_cartoons_2014') {
        $search_str = 'agu-cartoons-permalink/';
        $nid = _ses_custom_get_html_substr($output, $search_str);
        if ($nid !== FALSE) {
            $url = url($search_str . $nid, array('absolute' => TRUE));
            $needle = _ses_custom_get_html_substr($output, 'data-url="');
            if ($needle !== FALSE) {
                $output = str_replace($needle, $url, $output);
            }
        }
    }

}

function ses_custom_node_view($node, $viewmode, $langcode)
{
  if ($node->nid == 49361) {
      $node->content['#attached']['js'][] = array
      (
	'type' => 'external',
        'data' => 'https://25livepub.collegenet.com/scripts/spuds.js'
      );
      $node->content['#attached']['js'][] = array(
	'type' => 'file',
	'data' => drupal_get_path('module','ses_custom') . '/ses_custom_25live.js',
      );
  }
}

// implementation of hook_stanford_r25_contact_alter because user phone numbers are not included in 25Live
// and so we want to get them from ldap and include them in the contact info
function ses_custom_stanford_r25_contact_alter(&$contact) {
    // only lookup an email once for a page
    static $contact_array = array();

    // parse the email address from the $contact var passed by stanford_r25
    $start = strpos($contact,'mailto:');
    if ($start !== false) {
        $start += 7;
        $end = strpos($contact,'"',$start);
        if ($end !== false) {
            $email = substr($contact,$start,$end-$start);
            // if we have an email address
            if ($email !== false) {
                // check if we already found it. if not do an ldap lookup
                if (empty($contact_array[$email])) {
                    $ldap_info = _ses_custom_get_ldap_contact($email, 'mail');
                    if (empty($ldap_info['field_cap_primary_phone'][0])) {
                        $contact_array[$email] = 'n/a';
                    } else {
                        $contact_array[$email] = $ldap_info['field_cap_primary_phone'][0];
                    }
                }
                // return the found email or h/a
                $contact .= "&nbsp;<span>Phone: " . $contact_array[$email] . "</span>";
            }
        }
    }
}

/**
 * Implementation of hook_mail for emailing errors to admin
 */
function ses_custom_mail($key, &$message, $params)
{
    if (substr_compare($key, 'ses_custom',0,10) === 0) {
        $message['subject'] = $params['subject'];
        $message['body'] = $params['body'];
    }
}

function _ses_custom_mail_error_report($errors, $source) {
    // send an email about the booking if mail list is set
    $mail_list = 'ksharp@stanford.edu';
    $subject = 'Drupal Errors encountered with ' . $source;
    $params = array('body' => $errors, 'subject' => $subject);
    drupal_mail('ses_custom', 'ses_custom_'.$source, $mail_list, language_default(), $params);
}

function ses_custom_cron() {
  $subject = 'Cron Workgroup Updates';
  if (date('G') == 1) {
    _ses_custom_store_regular_workgroups();
    $params = array('body' => array('updated regular workgroup members via cron'), 'subject' => $subject);
    drupal_mail('ses_custom', 'ses_custom_update_regular', 'ksharp@stanford.edu', language_default(), $params);
  } else if (date('G') == 2) {
    _ses_custom_store_research_workgroups();
    $params = array('body' => array('updated research workgroup members via cron'), 'subject' => $subject);
    drupal_mail('ses_custom', 'ses_custom_update_regular', 'ksharp@stanford.edu', language_default(), $params);
  }
}